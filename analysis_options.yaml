# more info: https://dart.dev/guides/language/analysis-options
# all rules: https://dart.dev/tools/linter-rules

include: package:flutter_lints/flutter.yaml

analyzer:
  language:
    # strict-casts: true
    strict-inference: true
    strict-raw-types: true

linter:
  rules:
    # This list is derived from the list of all available lints located at
    # https://github.com/dart-lang/sdk/blob/main/pkg/linter/example/all.yaml
    always_declare_return_types: true 
    # always_put_control_body_on_new_line: true 
    # always_put_required_named_parameters_first: true  # we prefer having parameters in the same order as fields https://github.com/flutter/flutter/issues/10219
    # always_specify_types: true  # often hurts readability
    # always_use_package_imports: true  # we do this commonly
    annotate_overrides: true 
    annotate_redeclares: true 
    avoid_annotating_with_dynamic: true  # conflicts with always_specify_types
    avoid_bool_literals_in_conditional_expressions: true 
    avoid_catches_without_on_clauses: true  # blocked on https://github.com/dart-lang/linter/issues/3023
    avoid_catching_errors: true  # blocked on https://github.com/dart-lang/linter/issues/4998
    # avoid_classes_with_only_static_members: true  # we do this commonly for `abstract final class`es
    avoid_double_and_int_checks: true 
    avoid_dynamic_calls: true 
    avoid_empty_else: true 
    avoid_equals_and_hash_code_on_mutable_classes: true 
    avoid_escaping_inner_quotes: true 
    avoid_field_initializers_in_const_classes: true 
    avoid_final_parameters: true  # incompatible with prefer_final_parameters
    avoid_function_literals_in_foreach_calls: true 
    # avoid_implementing_value_types: true  # see https://github.com/dart-lang/linter/issues/4558
    avoid_init_to_null: true 
    avoid_js_rounded_ints: true 
    # avoid_multiple_declarations_per_line: true  # seems to be a stylistic choice we don't subscribe to
    avoid_null_checks_in_equality_operators: true 
    avoid_positional_boolean_parameters: true  # would have been nice to enable this but by now there's too many places that break it
    avoid_print: true 
    # avoid_private_typedef_functions: true  # we prefer having typedef (discussion in https://github.com/flutter/flutter/pull/16356)
    avoid_redundant_argument_values: true 
    avoid_relative_lib_imports: true 
    avoid_renaming_method_parameters: true 
    avoid_return_types_on_setters: true 
    avoid_returning_null_for_void: true 
    avoid_returning_this: true  # there are enough valid reasons to return `this` that this lint ends up with too many false positives
    avoid_setters_without_getters: true 
    avoid_shadowing_type_parameters: true 
    avoid_single_cascade_in_expression_statements: true 
    avoid_slow_async_io: true 
    avoid_type_to_string: true 
    avoid_types_as_parameter_names: true 
    # avoid_types_on_closure_parameters: true  # conflicts with always_specify_types
    avoid_unnecessary_containers: true 
    avoid_unused_constructor_parameters: true 
    # avoid_void_async: true 
    avoid_web_libraries_in_flutter: true  # we use web libraries in web-specific code, and our tests prevent us from using them elsewhere
    await_only_futures: true 
    camel_case_extensions: true 
    camel_case_types: true 
    cancel_subscriptions: true 
    # cascade_invocations: true  # doesn't match the typical style of this repo
    cast_nullable_to_non_nullable: true 
    # close_sinks: true  # not reliable enough
    collection_methods_unrelated_type: true 
    combinators_ordering: true 
    # comment_references: true  # blocked on https://github.com/dart-lang/linter/issues/1142
    conditional_uri_does_not_exist: true 
    # constant_identifier_names: true  # needs an opt-out https://github.com/dart-lang/linter/issues/204
    control_flow_in_finally: true 
    curly_braces_in_flow_control_structures: true 
    dangling_library_doc_comments: true 
    depend_on_referenced_packages: true 
    deprecated_consistency: true 
    # deprecated_member_use_from_same_package: true  # we allow self-references to deprecated members
    # diagnostic_describe_all_properties: true  # enabled only at the framework level (packages/flutter/lib)
    directives_ordering: true 
    # discarded_futures: true  # too many false positives, similar to unawaited_futures
    # do_not_use_environment: true  # there are appropriate times to use the environment, especially in our tests and build logic
    document_ignores: true  # not yet tested
    empty_catches: true 
    empty_constructor_bodies: true 
    empty_statements: true 
    eol_at_end_of_file: true 
    exhaustive_cases: true 
    file_names: true 
    flutter_style_todos: true 
    hash_and_equals: true 
    implementation_imports: true 
    implicit_call_tearoffs: true 
    implicit_reopen: true 
    invalid_case_patterns: true 
    invalid_runtime_check_with_js_interop_types: true 
    join_return_with_assignment: true  # not required by flutter style
    # leading_newlines_in_multiline_strings: true 
    library_annotations: true 
    library_names: true 
    library_prefixes: true 
    library_private_types_in_public_api: true 
    # lines_longer_than_80_chars: true  # not required by flutter style
    literal_only_boolean_expressions: true 
    matching_super_parameters: true  # blocked on https://github.com/dart-lang/language/issues/2509
    missing_code_block_language_in_doc_comment: true 
    missing_whitespace_between_adjacent_strings: true 
    no_adjacent_strings_in_list: true 
    no_default_cases: true 
    no_duplicate_case_values: true 
    no_leading_underscores_for_library_prefixes: true 
    no_leading_underscores_for_local_identifiers: true 
    no_literal_bool_comparisons: true 
    no_logic_in_create_state: true 
    # no_runtimeType_toString: true  # ok in tests; we enable this only in packages/
    no_self_assignments: true 
    no_wildcard_variable_uses: true 
    non_constant_identifier_names: true 
    noop_primitive_operations: true 
    null_check_on_nullable_type_parameter: true 
    null_closures: true 
    # omit_local_variable_types: true  # opposite of always_specify_types
    # omit_obvious_local_variable_types: true  # not yet tested
    # one_member_abstracts: true  # too many false positives
    only_throw_errors: true # this does get disabled in a few places where we have legacy code that uses strings et al
    overridden_fields: true 
    # package_api_docs: true  # Deprecated (https://github.com/dart-lang/linter/issues/5107)
    package_names: true 
    package_prefixed_library_names: true 
    # parameter_assignments: true  # we do this commonly
    prefer_adjacent_string_concatenation: true 
    prefer_asserts_in_initializer_lists: true 
    # prefer_asserts_with_message: true  # not required by flutter style
    prefer_collection_literals: true 
    prefer_conditional_assignment: true 
    prefer_const_constructors: true 
    prefer_const_constructors_in_immutables: true 
    prefer_const_declarations: true 
    prefer_const_literals_to_create_immutables: true 
    # prefer_constructors_over_static_methods: true  # far too many false positives
    prefer_contains: true 
    # prefer_double_quotes: true  # opposite of prefer_single_quotes
    # prefer_expression_function_bodies: true  # conflicts with ./docs/contributing/Style-guide-for-Flutter-repo.md#consider-using--for-short-functions-and-methods
    prefer_final_fields: true 
    prefer_final_in_for_each: true 
    prefer_final_locals: true 
    # prefer_final_parameters: true  # adds too much verbosity
    prefer_for_elements_to_map_fromIterable: true 
    prefer_foreach: true 
    prefer_function_declarations_over_variables: true 
    prefer_generic_function_type_aliases: true 
    prefer_if_elements_to_conditional_expressions: true 
    prefer_if_null_operators: true 
    prefer_initializing_formals: true 
    prefer_inlined_adds: true 
    # prefer_int_literals: true  # conflicts with ./docs/contributing/Style-guide-for-Flutter-repo.md#use-double-literals-for-double-constants
    prefer_interpolation_to_compose_strings: true 
    prefer_is_empty: true 
    prefer_is_not_empty: true 
    prefer_is_not_operator: true 
    prefer_iterable_whereType: true 
    prefer_mixin: true 
    # prefer_null_aware_method_calls: true  # "call()" is confusing to people new to the language since it's not documented anywhere
    prefer_null_aware_operators: true 
    # prefer_relative_imports: true 
    prefer_single_quotes: true 
    prefer_spread_collections: true 
    prefer_typing_uninitialized_variables: true 
    prefer_void_to_null: true 
    provide_deprecation_message: true 
    # public_member_api_docs: true  # enabled on a case-by-case basis; see e.g. packages/analysis_options.yaml
    recursive_getters: true 
    # require_trailing_commas: true  # would be nice, but requires a lot of manual work: 10,000+ code locations would need to be reformatted by hand after bulk fix is applied
    secure_pubspec_urls: true 
    sized_box_for_whitespace: true 
    sized_box_shrink_expand: true 
    slash_for_doc_comments: true 
    sort_child_properties_last: true 
    sort_constructors_first: true 
    # sort_pub_dependencies: true  # prevents separating pinned transitive dependencies
    sort_unnamed_constructors_first: true 
    specify_nonobvious_local_variable_types: true 
    test_types_in_equals: true 
    throw_in_finally: true 
    tighten_type_of_initializing_formals: true 
    type_annotate_public_apis: true # subset of always_specify_types
    type_init_formals: true 
    type_literal_in_constant_pattern: true 
    # unawaited_futures: true  # too many false positives, especially with the way AnimationController works
    # unintended_html_in_doc_comment: true  # blocked on https://github.com/dart-lang/linter/issues/5065
    unnecessary_await_in_return: true 
    unnecessary_brace_in_string_interps: true 
    unnecessary_breaks: true 
    unnecessary_const: true 
    unnecessary_constructor_name: true 
    # unnecessary_final: true  # conflicts with prefer_final_locals
    unnecessary_getters_setters: true 
    unnecessary_lambdas: true  # has false positives: https://github.com/dart-lang/linter/issues/498
    unnecessary_late: true 
    unnecessary_library_directive: true 
    # unnecessary_library_name: true  # blocked on https://github.com/dart-lang/lints/issues/181#issuecomment-2018919034
    unnecessary_new: true 
    unnecessary_null_aware_assignments: true 
    unnecessary_null_aware_operator_on_extension_on_nullable: true 
    unnecessary_null_checks: true 
    unnecessary_null_in_if_null_operators: true 
    unnecessary_nullable_for_final_variable_declarations: true 
    unnecessary_overrides: true 
    unnecessary_parenthesis: true 
    # unnecessary_raw_strings: true  # what's "necessary" is a matter of opinion; consistency across strings can help readability more than this lint
    unnecessary_statements: true 
    unnecessary_string_escapes: true 
    unnecessary_string_interpolations: true 
    unnecessary_this: true 
    unnecessary_to_list_in_spreads: true 
    # unreachable_from_main: true 
    unrelated_type_equality_checks: true 
    use_build_context_synchronously: true 
    use_colored_box: true 
    # use_decorated_box: true  # leads to bugs: DecoratedBox and Container are not equivalent (Container inserts extra padding)
    use_enums: true 
    use_full_hex_values_for_flutter_colors: true 
    use_function_type_syntax_for_parameters: true 
    use_if_null_to_convert_nulls_to_bools: true 
    use_is_even_rather_than_modulo: true 
    use_key_in_widget_constructors: true 
    use_late_for_private_fields_and_variables: true 
    use_named_constants: true 
    use_raw_strings: true 
    use_rethrow_when_possible: true 
    use_setters_to_change_properties: true 
    # use_string_buffers: true  # has false positives: https://github.com/dart-lang/sdk/issues/34182
    use_string_in_part_of_directives: true 
    use_super_parameters: true 
    use_test_throws_matchers: true 
    use_to_and_as_if_applicable: true  # has false positives, so we prefer to catch this by code-review
    use_truncating_division: true 
    valid_regexps: true 
    void_checks: true 


